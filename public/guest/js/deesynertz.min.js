currency_format = {
    style: "currency",
    currency: "TZS",
};

pickup_active = false;

function convert(money) {
    if (money >= 1000000) {
        money /= 1000000;
        money += "M";
    } else if (money >= 1000) {
        money /= 1000;
        money += "K";
    }

    return "TZS " + money;
}

// function selectedRentToOwn(id, name) {
//   localStorage.setItem('selected_service', JSON.stringify({
//     'selected_serv_id': id,'selected_sv_name': name}));
// }

// function removeServiceAfterSend(itemName) {

//   if(localStorage.getItem(itemName) != null){
//     localStorage.removeItem(itemName);
//   }
// }

function selectedSetService(serviceID, serviceName, ids) {
    if (localStorage.getItem("selected_service") != null) {
        localStorage.removeItem("selected_service");
    }

    var tempInfo = "";

    if (serviceName == "Rent-To-Own") {
        tempInfo = {
            serviceID: serviceID,
            serviceName: serviceName,
            id: ids.partialStatus.map_id,
            partialStatus: ids.partialStatus,
        };
    }

    localStorage.setItem("selected_service", JSON.stringify(tempInfo));

    //localStorage.setItem('selected_service', json_data);
    // console.log(JSON.parse(localStorage.getItem('selected_service')));

    setInterval(() => {
        localStorage.removeItem("selected_service");
    }, 24 * (60 * 60) * 1000);
}

function getOneItem(condition, url, type, data) {
    $.ajax({
        url: url,
        type: "POST",
        data: data,
        dataType: "json",
        success: function (result) {
            return result;
        },
    });
}

function rentTab() {
    var isOpen = false;
    var validate = $("#validate").val();
    clearHide("map-icon");

    if (validate == "false") {
        $(".search-form").slideDown();
        $(".google-map").hide();
        clearSlidedown("map-icon");
        clearHide("rent-icon");
        isOpen = true;
    } else {
        $(".search-form").hide();
        $(".google-map").slideDown();
    }
    $(".rent-tab").click(function () {
        if (isOpen) {
            $(".search-form").hide();
            $(".google-map").slideDown();
            clearSlidedown("rent-icon");
            clearHide("map-icon");
            isOpen = false;
        } else {
            Swal.fire({
                html:
                    "<h4>"+renting_for+"</h4>" +
                    "<select class='form-control fs-xs' id='choices'>" +
                    "<option value='none'>--"+choose+"--</option>" +
                    "<option value='"+residential+"'>"+residential+"</option>" +
                    "<option value='"+commercial+"'>"+commercial+"</option>" +
                    "<option value='"+both+"'>"+both+"</option>" +
                    "</select><br><div id='alert' style='color:red'></div>",
                icon: "question",
                preConfirm: function () {
                    var choice = $("#choices").val();
                    return new Promise(function (resolve, reject) {
                        setTimeout(function () {
                            if (choice === "none") {
                                $(`#alert`).html(
                                    req_field
                                );
                                Authorization();
                                reject(req_field);
                            } else {
                                $("#rent-choice").val(choice);
                                $(".search-form").css("visibility", "visible");
                                $(".search-form").fadeIn();
                                $(".google-map").hide();
                                $("#rent-txt").text(choice);
                                clearSlidedown("map-icon");
                                clearHide("rent-icon");
                                isOpen = true;
                                resolve();
                            }
                        }, 1000);
                    });
                },
                allowOutsideClick: true,
                showDenyButton: false,
                showConfirmButton: true,
                showCancelButton: false,
                confirmButtonColor: "#00314a",
                confirmButtonText: submit_btn,
                cancelButtonText: "Ignore",
            });
        }
    });
}

function getNBH() {
    // var city_id = $("#city").val();
    // $.post(
    //     getNBH_url,
    //     {
    //         _token: _token,
    //         city_id: city_id,
    //     },
    //     function (NBH) {
    //         var data = NBH.split("!!");
    //         var ids = data[0].split("-");
    //         var wname = data[1].split("??");
    //         $("#wards").html(
    //             "<option value='none'>Select Neighbourhood</option>"
    //             + "<option value='dont_see_it'>My neighbourhood not found</option>"
    //         );
    //         for (var i = 0; i < ids.length; i++) {
    //             $("#wards").append(
    //                 "<option value=" + ids[i] + ">" + wname[i] + "</option>"
    //             );
    //         }
    //     }
    // );
    // $("#city").change(function () {
    //     var city_id = $(this).val();
    //     $.post(
    //         getNBH_url,
    //         {
    //             _token: _token,
    //             city_id: city_id,
    //         },
    //         function (NBH) {
    //             var data = NBH.split("!!");
    //             var ids = data[0].split("-");
    //             var wname = data[1].split("??");
    //             $("#wards").html(
    //                 "<option value='none'>Select Neighbourhood</option>"
    //                 + "<option value='dont_see_it'>My neighbourhood not found</option>"
    //             );
    //             for (var i = 0; i < ids.length; i++) {
    //                 $("#wards").append(
    //                     "<option value=" + ids[i] + ">" + wname[i] + "</option>"
    //                 );
    //             }
    //         }
    //     );
    // });

    // var ward = $("#wards").val();
    //     if(ward === 'dont_see_it') {
    //         $('#alt-neighbourhood').removeAttr('disabled');
    //     } else {
    //         $('#alt-neighbourhood').attr('disabled', 'disabled');

    //     }

    // $('#wards').change(function() {
    //     var ward = $(this).val();
    //     if(ward === 'dont_see_it') {
    //         $('#alt-neighbourhood').removeAttr('disabled');
    //     } else {
    //         $('#alt-neighbourhood').attr('disabled', 'disabled');

    //     }
    // })

    $(".searchForm").on("submit", function (e) {
        // e.preventDefault();
        // alert($('#alt-neighbourhood').val().length)
        // if( $('#alt-neighbourhood').val().length > 0) {
        //     $("#wards, #city").removeAttr('required');
        //     $("#wards, #city").val('Neighbourhood not found');
        // } else {
        //     $("#wards, #city").attr('required', '');
        // }
    });
}

function uniqueID() {
    var nav_info = window.navigator;
    var screen_info = window.screen;
    var uid = navigator.mimeTypes.length;
    uid += nav_info.userAgent.replace(/\D+/g, "");
    uid += nav_info.plugins.length;
    uid += screen_info.height || "";
    uid += screen_info.width || "";
    uid += screen_info.pixelDepth || "";
    return uid;
}

function uniqueIdField() {
    var field = "<input type='' value='" + uniqueID() + "' />";
    document.write(field);
}

function makeAppointment() {
    appointmentNavigation();
    appointmentSubmission();
}

function appointmentSubmission() {
    $("#appointmentFor").on("submit", function (e) {
        e.preventDefault();
        var formData = new FormData(this);
        $.ajax({
            url: appointment,
            type: "POST",
            data: formData,
            contentType: false,
            cache: false,
            processData: false,
            success: function (feedback) {
                console.log(feedback);
            },
        });
    });
}

function vehicleFare(vehicleType) {
    $.post(
        commonCharge,
        {
            _token: _token,
            type: vehicleType,
        },
        function (feedback) {
            total = feedback.fee;
            $("#vehicleCharge").val(total);
        }
    );
}

function getVehicleFare(vehicleType) {
    vehicleFare(vehicleType);
    return $("#vehicleCharge").val();
}

function appointmentNavigation() {
    var total;
    clearHide("noVehicle");
    clearHide("loaderText");
    clearHide("cost-summary");
    $(".ownInput").on("click", function () {
        if (pickup_active) {
            clearShow("loaderText");
            clearShow("shortestPath");
            var choice = $(this).val();
            if (choice == "ownNo") {
                clearSlidedown("noVehicle");
                clearHide("cost-summary");
                $(".place-appointment-btn").attr("disabled", "");

                // $.post(
                //     commonCharge,
                //     {
                //         _token: _token,
                //         type: "House visit fee",
                //     },
                //     function (feedback) {
                //         total = feedback.fee + fare;
                //         clearHide("loaderText");
                //         $(".waterMarkedCost, .totalCost, .fee code").text(
                //             "TZS " + total.toLocaleString() + "/="
                //         );
                //         $("#feeInput").val(total);
                //     }
                // );

                // $("#vehicleTyp").change(function () {
                //     var vehicle = $(this).val();
                //     $.post(
                //         commonCharge,
                //         {
                //             _token: _token,
                //             type: "House visit fee",
                //         },
                //         function (feedback) {
                //             $("#feeInput").val(feedback.fee);
                //         }
                //     );

                //     $.post(
                //         commonCharge,
                //         {
                //             _token: _token,
                //             type: vehicle,
                //         },
                //         function (feedback) {
                //             var hvp = $("#feeInput").val();
                //             total = parseInt(feedback.fee) + parseInt(hvp);
                //             $("#vehicleCharge").val(total);
                            
                //             clearHide("loaderText");
                //             clearShow("fare");
                //             clearShow("cost-summary");

                //             $(".place-appointment-btn").removeAttr("disabled");
                //             $(".fare code").text(
                //                 "TZS " + feedback.fee.toLocaleString() + "/="
                //             );

                //             $(".fee code").text(
                //                 "TZS " + hvp.toLocaleString() + "/="
                //             );

                //             $(".waterMarkedCost, .totalCost").text(
                //                 "TZS " + total.toLocaleString() + "/="
                //             );
                //         }
                //     );
                // });

            } else {
                clearHide("fare");
                clearSlideup("noVehicle");
                clearShow("cost-summary");
                clearHide("payment-note");
                $(".place-appointment-btn").attr("disabled", "");

                // fetch house visit fee

                $.post(
                    commonCharge,
                    {
                        _token: _token,
                        type: "House visit fee",
                    },
                    function (feedback) {
                        clearHide("loaderText");
                        $(".place-appointment-btn").removeAttr("disabled");
                        $(".waterMarkedCost, .totalCost, .fee code").text(
                            "TZS " + feedback.fee.toLocaleString() + "/="
                        );
                        $("#feeInput").val(feedback.fee);
                    }
                );
            }
        }
    });
}

function fetchCommonCharge(type) {
    let feedbac;
    $.post(
        commonCharge,
        {
            _token: _token,
            type: type,
        },
        function (feedback) {
            clearHide("loaderText");
            feedbac = feedback;
            return feedback;
        }
    );
    return feedbac;
}

function clearHide(className) {
    $("." + className).css("visibility", "hidden");
    $("." + className).hide();
}

function clearSlideup(className) {
    $("." + className).css("visibility", "hidden");
    $("." + className).slideUp();
}

function clearShow(className) {
    $("." + className).css("visibility", "visible");
    $("." + className).fadeIn();
}

function clearSlidedown(className) {
    $("." + className).css("visibility", "visible");
    $("." + className).slideDown();
}
// function countDownTimer(time = 300000) {
//     var endTime = new Date(time).getTime();

//     const second = 1000,
//         minute = second * 60,
//         hour = minute * 60;

//     var x = setInterval(function () {
//         var now = new Date().getTime();
//         var distance = endTime - now;
//         distance /= 1000;
//         var days = Math.floor(distance / 86400);
//         var hours = Math.floor((distance / 3600) % 24);
//         var minutes = Math.floor((distance / 60) % 60);
//         var seconds = Math.floor(distance % 60);

//         if (days < 10) {
//             days = "0" + days;
//         }

//         if (hours < 10) {
//             hours = "0" + hours;
//         }

//         if (minutes < 10) {
//             minutes = "0" + minutes;
//         }

//         if (seconds < 10) {
//             seconds = "0" + seconds;
//         }

//         if (distance < 1 || isNaN(distance)) {
//             clearInterval(x);
//             console.log(distance);
//             document.getElementById("timer").innerHTML =
//                 "<span>" +
//                 "00" +
//                 ":</span><span>" +
//                 "00" +
//                 ":</span><span>" +
//                 "00" +
//                 "</span>";
//             $("#tiles").removeClass("color-half");
//             $("#tiles").addClass("color-empty");
//         } else {
//             document.getElementById("timer").innerHTML =
//                 "<span id='hours'>" +
//                 days +
//                 ":</span>" +
//                 "<span id='hours'>" +
//                 hours +
//                 ":<span/><span id='hours'>" +
//                 minutes +
//                 ":</span><span id='hours'>" +
//                 seconds +
//                 "</span>";
//         }

//         // document.getElementById("minutes").innerText = minutes;
//         // document.getElementById("seconds").innerText = seconds;
//         distance -= 1000;
//     }, 1000);
// }

function UserRegistration() {
    $(".verified-text").css("visibility", "hidden");
    $('.btn-with-unit-id').click(function() {
        $('#roleId').val('Tenant')
    })
    $(".register-form").on("submit", function (e) {
        e.preventDefault();
        var pass = $("#password").val();
        var cpass = $("#cpass").val();

        if (pass != cpass) {
            ToastMaker("Password do not match");
            return;
        }
        x = setInterval(function () {
            ToastMaker("Wait a moment... Creating account");
        }, 1000);

        $.ajax({
            url: userRegistrationUrl,
            type: "POST",
            data: new FormData(this),
            contentType: false,
            cache: false,
            processData: false,
            success: function (feedback) {
                console.log(feedback);
                if (feedback.result === "sent") {
                    clearInterval(x);
                    $(".otp-code").addClass("active");
                    $(".tab-pane-sign-up").removeClass("active");
                    $(".sign-in-tab").attr("disabled", "");
                    $(".sign-up-tab").attr("disabled", "");
                    // countDownTimer();
                    ToastMaker("Account created successfull");
                    setTimeout(function () {
                        ToastMaker("wait for verification code ");
                    }, 2000);
                    $("#userpwd").val(feedback.userpwd);
                    $("#resendPhone").val(feedback.phone);
                    $(".alert-status").html(
                        "Verification code has been sent to phone number +255******<b>" +
                            feedback.last3digits +
                            "</b>"
                    );
                } else if (feedback == "is_email_exists") {
                    clearInterval(x);
                    ToastMaker("Ooops, something went wrong!");
                    $("#email-error").text("Email already exists");
                    $("#phone-error").text("");
                } else if (feedback == "is_phone_exists") {
                    clearInterval(x);
                    ToastMaker("Ooops, something went wrong!");
                    $("#phone-error").text("Phone number already exists");
                    $("#email-error").text("");
                } else if (feedback == "both_exist") {
                    clearInterval(x);
                    ToastMaker("Ooops, something went wrong!");
                    $("#phone-error").text("Phone number already exists");
                    $("#email-error").text("Email already exists");
                } else {
                    clearInterval(x);
                    $("#phone-error").text("");
                    $("#email-error").text("");
                    Swal.fire("Ooops, something went wrong!", "", "error");
                }
            },
        });
    });
}

function verifyOtpCode() {
    $(".verification-danger").hide();
    $("#otp_codes").keyup(function () {
        var codes = $(this).val();
        var userpwd = $("#userpwd").val();
        var user_id = $("#resendUserId").val();
        if (codes.length >= 6) {
            $("#terminator").attr("disabled", "");
            $(this).attr("readonly", "");
            $(this).blur();
            $(".verify-text, .verify-spinner").css("display", "inline");
            $.post(
                verifyCodesUrl,
                {
                    _token: _token,
                    codes: codes,
                    user_id: user_id,
                },
                (feedback) => {
                    console.log(feedback);
                    if (feedback.status == "verified") {
                        $(".verification-danger").hide();
                        $(".verify-text, .verify-spinner").css(
                            "display",
                            "none"
                        );
                        setTimeout(function () {
                            $(".timer").slideUp();
                        }, 1000);
                        setTimeout(function () {
                            $(".timer-explanation").slideUp();
                        }, 1500);
                        setTimeout(function () {
                            $(".code-status").slideUp();
                        }, 2000);
                        setTimeout(function () {
                            $(".verification-form").hide();
                            $(".verified-text").css("visibility", "visible");
                            $(".verified-text").slideDown();
                        }, 3000);
                        setTimeout(function () {
                            x = setInterval(function () {
                                ToastMaker("Signing in ... Please wait");
                            }, 1000);

                            $.post(
                                userLoginUrl,
                                {
                                    _token: _token,
                                    phone: feedback.phone,
                                    password: userpwd,
                                },
                                function (feedback) {
                                    ToastMaker("You're signed in");
                                    clearInterval(x);
                                    setTimeout(function () {
                                        var unit_id = $("#unit_id").val();
                                        if (unit_id.length > 0) {
                                            autoAddToCart();
                                        } else {
                                            dismissModal();
                                            Swal.fire({
                                                position: "top-end",
                                                icon: "success",
                                                html:
                                                    welcome + " <b>" +
                                                    $("#name").val() +
                                                    "</b>",
                                                showConfirmButton: false,
                                                customClass: "swal-width",
                                                timer: 2000,
                                                timerProgressBar: true,
                                            });
                                            setTimeout(function () {
                                                window.location.reload();
                                            }, 3000);
                                        }
                                    }, 3000);
                                }
                            );
                        }, 3000);
                    } else {
                        $(this).removeAttr("readonly");
                        $(this).focus();
                        verifyOtpCode();
                        $(".verification-danger").fadeIn();
                        $(".verify-text, .verify-spinner").css(
                            "display",
                            "none"
                        );
                        $("#terminator").removeAttr("disabled");
                    }
                }
            );
        }
    });

    $("#otp_codes").on("click", function () {
        var codes = $(this).val();
        if (codes.length == 6) {
            $(this).blur();
        }
    });
}

function login() {
    $(".login-form").on("submit", function (e) {
        ToastMaker("Please wait... Signing in");
        e.preventDefault();
        $.ajax({
            url: ajaxLoginUrl,
            type: "POST",
            data: new FormData($(".login-form")[0]),
            contentType: false,
            cache: false,
            processData: false,
            success: function (feedback) {
                console.log(feedback);
                if (feedback.status == "valid user") {
                    $.post(
                        userLoginUrl,
                        {
                            _token: _token,
                            phone: feedback.formData.phone,
                            password: feedback.formData.password,
                        },
                        () => {
                            ToastMaker("You're signed in");
                            setTimeout(function () {
                                var unit_id = $("#unit_id").val();
                                if (unit_id.length > 0) {
                                    autoAddToCart();
                                } else {
                                    dismissModal();
                                    Swal.fire({
                                        position: "top-end",
                                        icon: "success",
                                        html:
                                            welcome + " <b>" +
                                            feedback.name +
                                            "</b>",
                                        showConfirmButton: false,
                                        customClass: "swal-width",
                                        timer: 2000,
                                        timerProgressBar: true,
                                    });
                                    setTimeout(function () {
                                        window.location.reload();
                                    }, 3000);
                                }
                            }, 1000);
                        }
                    );
                } else if (feedback.status == "invalid user") {
                    $(".error-alert").text(
                        invalid_login
                    );
                    ToastMaker(invalid_login);
                } else {
                    $(".error-alert").html(
                        unauthorised_content + " <b class='click-to-verify' style='color: #008db8; cursor: pointer'>"+verify+"</b>"
                    );

                    $("div").on("click", ".click-to-verify", function () {
                        $(".otp-code").addClass("active");
                        $(".tab-pane-sign-in").removeClass("active");
                        $(".sign-in-tab").attr("disabled", "");
                        $(".sign-up-tab").attr("disabled", "");

                        $("#userpwd").val(feedback.userpwd);
                        $("#resendPhone").val(feedback.phone);
                        $("#resendUserId").val(feedback.user_id);
                        $(".alert-status").html(
                           vcode_sent_to +" +255******<b>" +
                                feedback.last3digits +
                                "</b>"
                        );
                    });
                }
            },
        });
    });
}

function resendCodes() {
    $(".resend").on("click", function () {
        var phone = $("#resendPhone").val();
        var user_id = $("#resendUserId").val();
        $.post(
            resendCodesURI,
            {
                _token: _token,
                phone: phone,
                user_id: user_id,
            },
            (feedback) => {
                console.log(feedback);
                if (feedback.status == "Resend limit reached") {
                    $(".resend").html(pcontactus);
                    $(".alert-status").html(
                        max_resend
                    );
                    $(".remains-attemps").html(
                        rem_attempts +" <b>" +
                            feedback.remaining_attemps +
                            "</b>"
                    );
                } else {
                    $(".remains-attemps").html(
                        rem_attempts +" <b>" +
                            feedback.remaining_attemps +
                            "</b>"
                    );
                    $(".alert-status").html(
                        vcode_sent_to + " +255******<b>" +
                            feedback.last3digits +
                            "</b>"
                    );
                }
            }
        );
    });
}

function dismissModal() {
    $("#modal-block-tabs").fadeOut();
}

function autoAddToCart() {
    var unit_id = $("#unit_id").val();
    var last_route = $("#last_route").val();
    var ward_id = $("#ward_id").val();
    $.get(
        AutoAddToCart,
        {
            unit_id: unit_id,
            ward_id: ward_id,
            last_route: last_route,
        },
        function (feedback) {
            console.log(feedback);
            $("#modal-block-tabs").fadeOut();
            var ward_id = $("#ward_id").val();
            if (feedback.status) {
                Swal.fire({
                    html: "<h4>"+house_added_content+"</h4>",
                    customClass: "animated tada",
                    showDenyButton: true,
                    showConfirmButton: true,
                    showCancelButton: false,
                    confirmButtonColor: "#00314a",
                    denyButtonColor: "#b5121f",
                    confirmButtonText: go_now_btn,
                    denyButtonText: no_later_btn,
                }).then((result) => {
                    if (!result.isDenied) {
                        window.open(shoppingCartURI + "/" + ward_id, "_SELF");
                    } else {
                        window.location.reload();
                    }
                });
            } else {
                if (feedback.message === "danger") {
                    Swal.fire({
                        html: "Cart is full, Go to cart for appointment",
                        icon: "info",
                    }).then(() => {
                        window.open(shoppingCartURI + "/" + ward_id, "_SELF");
                    });
                }

                if (feedback.message === "Item already added") {
                    Swal.fire({
                        html: "<h4>The house is in your cart, Go to cart to make appointment</h4>",
                        showDenyButton: true,
                        showConfirmButton: true,
                        showCancelButton: false,
                        confirmButtonColor: "#00314a",
                        denyButtonColor: "#b5121f",
                        confirmButtonText: "Yes, Go now",
                        denyButtonText: "No, Later",
                    }).then((result) => {
                        if (!result.isDenied) {
                            window.open(
                                shoppingCartURI + "/" + ward_id,
                                "_SELF"
                            );
                        } else {
                            window.location.reload();
                        }
                    });
                }
            }
        }
    );
}

function AddToCart() {
    $(".add-to-cart").on("click", function () {
        var unit_id = $("#unit_id").val();
        carting(unit_id);
    });
}

function carting(unit_id) {
    var last_route = $("#last_route").val();
    var ward_id = $("#ward_id").val();
    $.post(
        addToCart,
        {
            _token: _token,
            unit_id: unit_id,
            ward_id: ward_id,
            last_route: last_route,
        },
        function (feedback) {
            // window.open("/shopping-cart/" + ward_id, "_SELF");
            if (feedback.status == true) {
                $(".add-to-cart").addClass("added");
                Swal.fire({
                    html: "<h4>"+house_added_content+"</h4>",
                    showDenyButton: true,
                    showConfirmButton: true,
                    showCancelButton: false,
                    confirmButtonColor: "#00314a",
                    denyButtonColor: "#b5121f",
                    confirmButtonText: go_now_btn,
                    denyButtonText: no_later_btn,
                }).then((result) => {
                    if (!result.isDenied) {
                        window.open(shoppingCartURI + "/" + ward_id, "_SELF");
                    } else {
                        window.location.reload();
                    }
                });
            } else {
                Swal.fire({
                    html: "Cart is full, Go to cart for appointment",
                    icon: "info",
                }).then(() => {
                    window.open(shoppingCartURI + "/" + ward_id, "_SELF");
                });
            }
        }
    );
}

function removeToCart() {
    $(".remove-to-cart").click(function () {
        var cart_id = $(this).val();
        var total = $("#total").val();
        Swal.fire({
            html: "<h4>"+house_removal+"</h4>",
            showDenyButton: true,
            showCancelButton: false,
            showConfirmButton: false,
            denyButtonColor: "#b5121f",
            denyButtonText: yes_remove_btn,
        }).then((result) => {
            if (result.isDenied) {
                $.post(
                    removeUnit,
                    {
                        _token: _token,
                        cart_id: cart_id,
                    },
                    function (result) {
                        if (result.status) {
                            Swal.fire({
                                html: "<h4>"+house_removed+"</h4>",
                                icon: "success",
                                confirmButtonColor: "#00314a",
                                confirmButtonText: ok_btn,
                            }).then(() => {
                                if (total != 1) {
                                    window.location.reload();
                                } else {
                                    Swal.fire({
                                        html: "<h4>"+empty_cart_content+"</h4>",
                                        icon: "info",
                                        confirmButtonColor: "#00314a",
                                        confirmButtonText: ok_btn,
                                    }).then(() => {
                                        window.open(result.last_route, "_SELF");
                                    });
                                }
                            });
                        } else {
                            Swal.fire({
                                html: "<h4>Process failed</h4>",
                                icon: "error",
                                confirmButtonColor: "#00314a",
                            });
                        }
                    }
                );
            }
        });
    });
}

function consoleText(words, id, colors) {
    if (colors === undefined) colors = ["#fff"];
    var visible = true;
    var con = document.getElementById("console");
    var letterCount = 1;
    var x = 1;
    var waiting = false;
    var target = document.getElementById(id);
    target.setAttribute("style", "color:" + colors[0]);
    window.setInterval(function () {
        if (letterCount === 0 && waiting === false) {
            waiting = true;
            target.innerHTML = words[0].substring(0, letterCount);
            if (letterCount == 0) {
                target.innerHTML = ".";
            }
            window.setTimeout(function () {
                var usedColor = colors.shift();
                colors.push(usedColor);
                var usedWord = words.shift();
                words.push(usedWord);
                x = 1;
                target.setAttribute("style", "color:" + colors[0]);
                letterCount += x;
                waiting = false;
            }, 10);
        } else if (letterCount === words[0].length + 1 && waiting === false) {
            waiting = true;
            window.setTimeout(function () {
                x = -1;
                letterCount += x;
                waiting = false;
            }, 5000);
        } else if (waiting === false) {
            target.innerHTML = words[0].substring(0, letterCount);
            letterCount += x;
        }
    }, 30);
}

function setUnitId() {
    $(".btn-with-unit-id").on("click", function () {
        var value = $(this).val();
        var data = value.split("-");
        $("#unit_id").val(data[0]);
        $("#ward_id").val(data[1]);
    });
}

function isSearchFormFillComplete() {
    $(" #room_numbers, #price").keyup(function () {
        var city = $("#city1").val();
        var district = $("#district1").val();
        var Neighbourhood = $("#ward1").val();
        var rooms = $("#room_numbers").val();
        var budget = $("#price").val();

        if (
            city.length != 0 &&
            Neighbourhood.length != 0 &&
            district.length != 0 &&
            rooms.length != 0 &&
            budget.length != 0
        ) {
            $("#search-btn").css({
                "background-color": "#00314a",
            });
            return true;
        } else {
            $("#search-btn").css({
                "background-color": "#cca415",
            });
            return false;
        }
    });

    $(" #city, #wards").change(function () {
        var city = $("#city1").val();
        var district = $("#district1").val();
        var Neighbourhood = $("#ward1").val();
        var rooms = $("#room_numbers").val();
        var budget = $("#price").val();

        if (
            city.length != 0 &&
            Neighbourhood.length != 0 &&
            district.length != 0 &&
            rooms.length != 0 &&
            budget.length != 0
        ) {
            $("#search-btn").css({
                "background-color": "#00314a",
            });
            return true;
        } else {
            $("#search-btn").css({
                "background-color": "#cca415",
            });
            return false;
        }
    });
    return false;
}

function setGuestMissedSearch() {
    $(".setNumber").on("submit", function (e) {
        e.preventDefault();
        $.post(
            setGuestnumber,
            {
                _token: _token,
                phone: $("#zeroPreferencesPhone").val(),
                ward_id: $("#ward_id").val(),
                price: $("#price").val(),
                total_rooms: $("#total_rooms").val(),
                goals: $("#goals").val(),
            },
            function (feedback) {
                if (feedback == "Invalid phone number") {
                    $.message.error({
                        message: feedback + " provided",
                        duration: 5000,
                    });
                } else {
                    ToastMaker("Submitted successfully");
                    setTimeout(function () {
                        window.location.reload();
                    }, 5000);
                    console.log(feedback);
                }
            }
        );
    });
}

function setExistedUserMissedSearch() {
    $.post(
        setGuestnumber,
        {
            _token: _token,
            ward_id: $("#ward_id").val(),
            price: $("#price").val(),
            total_rooms: $("#total_rooms").val(),
            goals: $("#goals").val(),
        },
        function (feedback) {
            console.log(feedback);
            if (feedback == "Invalid phone number") {
                $.message.error({
                    message: feedback + " provided",
                    duration: 5000,
                });
            }
        }
    );
}

function changeGuestPhonenumber() {
    $("#changeBtn").click(function () {
        $(".changeNumber").css("visibility", "visible");
    });
    $(".changeNumber").on("submit", function (e) {
        e.preventDefault();
        $.post(
            setGuestnumber,
            {
                _token: _token,
                phone: $("#zeroPreferencesPhone").val(),
            },
            function (feedback) {
                if (feedback == "Invalid phone number") {
                    $.message.error({
                        message: feedback + " provided",
                        duration: 5000,
                    });
                } else {
                    ToastMaker("Changed successfully");
                    setTimeout(function () {
                        window.location.reload();
                    }, 5000);
                }
            }
        );
    });
}

function financialFeaturs() {
    // financialCalculation();
    $("#withholding-tax").click(function () {
        financialCalculation(this);
    });
}

function financialCalculation(checkbox) {
    var total_cost = $("#total_cost").val();
    var tax = $("#withholding_tax").val();
    if (checkbox.checked) {
        var sum = parseInt(total_cost);
        sum = sum.toLocaleString("en-US");
        $(".withholding-summary-row").slideDown();
        $("#cost_text").text(sum);
    } else {
        $(".flashlight").css({
            animation: "flashlight .5s ease-in-out ",
        });
        $(".withholding-summary-row").slideUp();
        var sum = parseInt(total_cost) - parseInt(tax);
        sum = sum.toLocaleString("en-US");
        $("#cost_text").text(sum);
    }
}

function onNeighbourhoodChange() {
    $("#cart_neighbourhood").change(function () {
        var ward_id = $(this).val();
        var current_neighbourhood = $("#ward_id").val();
        if (ward_id.length != 0 && ward_id != current_neighbourhood) {
            windowLoader();
            window.open(shoppingCartURI + "/" + ward_id, "_SELF");
        }
    });
}

function windowLoader() {
    $(".loader-body").css("visibility", "visible").fadeIn();
}

function pickupPoint() {
    var str = $("#pickup_point").val();
    if (str.length > 0) {
        pickup_active = true;
        $(".choosepoint").css("visibility", "hidden").hide();
    } else {
        pickup_active = false;
        $(".choosepoint").css("visibility", "visible").show();
    }

    $("#pickup_point").change(function () {
        var str = $(this).val();
        if (str.length > 0) {
            pickup_active = true;
            $(".choosepoint").css("visibility", "hidden").hide();
        } else {
            pickup_active = false;
            $(".choosepoint").css("visibility", "visible").show();
        }
    });
}

function dateFieldMinValue(fieldId) {
    var today = new Date();
    var dd = today.getDate();
    var mm = today.getMonth() + 1; //January is 0!
    var yyyy = today.getFullYear();
    if (dd < 10) {
        dd = "0" + dd;
    }
    if (mm < 10) {
        mm = "0" + mm;
    }
    today = yyyy + "-" + mm + "-" + dd;
    document.getElementById(fieldId).setAttribute("min", today);
}

function timeFieldMinValue(fieldId) {
    var today = new Date();
    var hh = today.getHours();
    var mm = today.getMinutes();
    if (mm < 10) {
        mm = "0" + mm;
    }
    today = hh + ":" + mm;
    document.getElementById(fieldId).setAttribute("min", today);
}

function visitPath(station, unvisited, transportCost = 0, visited = []) {
    let services = new google.maps.DistanceMatrixService();
    var origins = [];
    let destinations = [];

    unvisited.forEach((destiny) => {
        destinations.push({
            lat: destiny.lat,
            lng: destiny.lng,
        });
        origins.push({
            lat: station[0].lat,
            lng: station[0].lng,
        });
    });
    // console.log(unvisited.length);
    // console.log(origins);return;

    var request = {
        origins: origins,
        destinations: destinations,
        travelMode: google.maps.TravelMode.DRIVING,
        unitSystem: google.maps.UnitSystem.METRIC,
        avoidHighways: false,
        avoidTolls: false,
    };

    let visitTransportCost = (distance, transportCost) => {
        cost = (distance / 1000) * transportCost;
        cost = cost - (cost % 100);
        return Math.round(cost);
    };

    let setDistance = (unvisited, distanceObj, visited, transportCost) => {
        for (var i = 0; i < unvisited.length; i++) {
            unvisited[i].distance = distanceObj[i].distance.value;
        }

        const closest = unvisited.reduce((acc, loc) =>
            acc.distance < loc.distance ? acc : loc
        );

        // create new unvisited list
        let newUnvisited = [];
        let newStation = [];
        unvisited.forEach((house) => {
            if (closest.houseCode != house.houseCode) {
                newUnvisited.push({
                    houseCode: house.houseCode,
                    distance: house.distance,
                    lat: house.lat,
                    lng: house.lng,
                });
            } else {
                newStation = [
                    {
                        houseCode: house.houseCode,
                        distance: house.distance,
                        lat: house.lat,
                        lng: house.lng,
                    },
                ];
                visited.push({
                    houseCode: house.houseCode,
                    distance: house.distance,
                    lat: house.lat,
                    lng: house.lng,
                });
            }
        });

        if (newUnvisited.length == 0) {
            // console.log(visited);
            path = "<ol type='1'>";
            visited.forEach((house) => {
                total_distance += house.distance;
                console.log(house.distance + "," + transportCost);
                path += "<li>" + house.houseCode + "</li>";
            });
            path += "</ol>";
            $("#path").html(path);
            var tcost = visitTransportCost(total_distance, transportCost);
            console.log(visited);
            console.log(total_distance + "," + transportCost);
            var hvp = $("#feeInput").val();
            total = parseInt(tcost) + parseInt(hvp);
            $("#vehicleCharge").val(total);
            clearHide("loaderText");
            $(".fare code").text(
                tcost.toLocaleString("en-US", currency_format)
            );

            $(".fee code").text(
                parseInt(hvp).toLocaleString("en-US", currency_format)
            );

            $(".waterMarkedCost").text(
                parseInt(hvp).toLocaleString("en-US", currency_format)
            );

            $(".totalCost").html(
                "Only house visit fee <code>" + parseInt(hvp).toLocaleString("en-US", currency_format) + "</code> to be paid."
            );
            return;
        }
        visitPath(newStation, newUnvisited, transportCost, visited);
    };

    services.getDistanceMatrix(request).then(function (res) {
        var origin = res.originAddresses;
        var destination = res.destinationAddresses;
        setDistance(unvisited, res.rows[0].elements, visited, transportCost);
    });
}

function sharetoearn() {
    $('.link-item').hide();
    $('#generate-link-btn').on('click', function(){
        $('#roleId').val('Dalali')
        // $(this).hide();
        // $('.link-content').slideDown();
        // url = $('#current-url').val();
        // unit_id = $('#unit_id_input').val();
        // $.post(generateLinkURL, {
        //     _token: _token,
        //     url: url,
        //     unit_id: unit_id
        // }, function(feeback) {
        //     $('#link-loader, .spinner').hide();
        //     $("#link").text(feeback.url);
        //     $('.link-item').fadeIn();
        // });
    });
}

function copyToClipBoard(id) {

    var content = document.getElementById(id);
    content.select();
    document.execCommand('copy');
    ToastMaker('Copied to clipboard!');
}



onNeighbourhoodChange();
financialFeaturs();
isSearchFormFillComplete();


// for testing
verifyOtpCode();
login();
resendCodes();
setUnitId();

UserRegistration();
removeToCart();
AddToCart();
rentTab();
getNBH();
